import * as prompts from "@clack/prompts";
import chalk from "chalk";
import { parseArgs } from "node:util";
import { z } from "zod";
import { packageData } from "../packageData.js";
import { runModeInitialize } from "./initialize.ts/runModeInitialize.js";
import { logHelpText } from "./logHelpText.js";
import { runModeMigrate } from "./migrate/runModeMigrate.js";
import { readProductionSettings } from "./readProductionSettings.js";
const valuesSchema = z.object({
    directory: z.string().default("."),
    from: z.string().optional(),
    mode: z.union([z.literal("initialize"), z.literal("migrate")]).optional(),
});
export async function betterCli(args, logger) {
    const { positionals, values } = parseArgs({
        args,
        options: {
            directory: {
                type: "string",
            },
            from: {
                type: "string",
            },
            help: {
                type: "boolean",
            },
            mode: {
                type: "string",
            },
            preset: {
                type: "string",
            },
            version: {
                type: "boolean",
            },
        },
        strict: false,
    });
    if (values.help) {
        logHelpText(logger);
        return 0;
    }
    if (values.version) {
        console.log(packageData.version);
        return 0;
    }
    prompts.intro([
        chalk.greenBright(`✨ `),
        chalk.bgGreenBright.black(`create`),
        chalk.greenBright(`@${packageData.version} ✨`),
    ].join(""));
    const validatedValues = valuesSchema.parse(values);
    const productionSettings = await readProductionSettings(validatedValues);
    const { outro, status } = productionSettings.mode === "initialize"
        ? await runModeInitialize({ ...validatedValues, positionals })
        : await runModeMigrate();
    prompts.outro(outro);
    return status;
}
await betterCli(process.argv, console);
//# sourceMappingURL=betterCli.js.map