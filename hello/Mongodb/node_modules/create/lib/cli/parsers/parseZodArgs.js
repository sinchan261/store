// TODO: Split out into standalone package
/* eslint-disable @eslint-community/eslint-comments/disable-enable-pair */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable @typescript-eslint/no-unsafe-argument */
// TODO: Add fancy TS types to convert from Zod to parseArgs
import { parseArgs } from "util";
import { ZodFirstPartyTypeKind, } from "zod";
export function parseZodArgs(args, options) {
    const argsOptions = {};
    for (const [key, value] of Object.entries(options)) {
        const argsOption = zodValueToArgsOption(key, value);
        if (!(argsOption instanceof Error)) {
            argsOptions[key] = argsOption;
        }
    }
    return parseArgs({
        args,
        options: argsOptions,
        strict: false,
    }).values;
}
function zodValueToArgsOption(key, zodValue) {
    switch (zodValue._def.typeName) {
        case "ZodBoolean":
        case "ZodLiteral":
        case "ZodString":
            return {
                type: zodValueTypeToArgsOptionType(zodValue._def),
            };
        case "ZodOptional":
            return zodValueToArgsOption(key, zodValue._def.innerType);
        case "ZodUnion":
            return zodValueToArgsOption(key, zodValue._def.options[0]);
    }
    return new Error(`create does not know how to parse --${key}'s Zod type on the CLI: ${zodValue._def.typeName}`);
}
function zodValueTypeToArgsOptionType(def) {
    switch (def.typeName) {
        case ZodFirstPartyTypeKind.ZodBoolean:
            return "boolean";
        case ZodFirstPartyTypeKind.ZodLiteral: {
            const typeofValue = typeof def.value;
            if (typeofValue === "boolean" || typeofValue === "string") {
                return typeofValue;
            }
            throw new Error(
            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions, @typescript-eslint/no-unsafe-call
            `create does not know how to parse this Zod literal on the CLI: ${def.value?.toString()}`);
        }
        case ZodFirstPartyTypeKind.ZodString:
            return "string";
    }
}
//# sourceMappingURL=parseZodArgs.js.map