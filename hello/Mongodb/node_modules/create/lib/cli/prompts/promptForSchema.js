import * as prompts from "@clack/prompts";
import * as z from "zod";
import { validateNumber, validatorFromSchema } from "./validators.js";
export async function promptForSchema(key, schema) {
    const def = schema._def;
    const message = schema.description
        ? `What will the ${schema.description} be? (--${key})`
        : `What will the --${key} be?`;
    let value;
    while (value === undefined || value === "") {
        switch (def.typeName) {
            case z.ZodFirstPartyTypeKind.ZodBoolean: {
                value = await prompts.confirm({ message });
                break;
            }
            case z.ZodFirstPartyTypeKind.ZodNumber:
                value = Number(await prompts.text({
                    message,
                    validate: validateNumber,
                }));
                break;
            // TODO: Handle numeric literals, unions, ...
            default: {
                const text = await prompts.text({
                    message,
                    validate: validatorFromSchema(schema),
                });
                if (prompts.isCancel(text)) {
                    return text;
                }
                return schema.parse(text);
            }
        }
    }
    return value;
}
//# sourceMappingURL=promptForSchema.js.map