import { execa, parseCommandString } from "execa";
import * as nodeFS from "node:fs/promises";
export function createWritingFileSystem() {
    return {
        readFile: async (filePath) => (await nodeFS.readFile(filePath)).toString(),
        writeDirectory: async (directoryPath) => void (await nodeFS.mkdir(directoryPath, { recursive: true })),
        writeFile: async (filePath, contents) => {
            await nodeFS.writeFile(filePath, contents);
        },
    };
}
export function createNativeSystems(providedSystem = {}) {
    const system = {
        fetcher: providedSystem.fetcher ?? fetch,
        fs: providedSystem.fs ?? createWritingFileSystem(),
        runner: providedSystem.runner ??
            (async (command) => await execa `${parseCommandString(command)}`),
    };
    const take = ((input, args) => input({ args, take, ...system }));
    return { system, take };
}
export function createSystemContext(providedSystem) {
    const { system, take } = createNativeSystems(providedSystem);
    return { ...system, take };
}
//# sourceMappingURL=createNativeSystems.js.map