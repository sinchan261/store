import { vi, describe, expect, test } from "vitest";
import { createBase } from "../creators/createBase.js";
import { z } from "zod";
import { runBlock } from "./runBlock.js";
const base = createBase({
    options: {
        title: z.string(),
    },
});
const noop = (label) => vi.fn(() => {
    throw new Error(`Not implemented: ${label}`);
});
describe("runBlock", () => {
    test("Block without Addons", async () => {
        const block = base.createBlock({
            produce({ options }) {
                return {
                    files: {
                        "README.md": `# ${options.title}`,
                    },
                };
            },
        });
        const writeDirectory = vi.fn();
        const writeFile = vi.fn();
        await runBlock(block, {
            options: { title: "abc" },
            fs: {
                readFile: noop("readFile"),
                writeDirectory,
                writeFile,
            },
            fetcher: noop("fetcher"),
            runner: noop("runner"),
        });
        expect({
            writeDirectory: writeDirectory.mock.calls,
            writeFile: writeFile.mock.calls,
        }).toMatchInlineSnapshot(`
			{
			  "writeDirectory": [
			    [
			      ".",
			    ],
			  ],
			  "writeFile": [
			    [
			      "README.md",
			      "# abc
			",
			    ],
			  ],
			}
		`);
    });
    describe("Block with Addons", async () => {
        const block = base.createBlock({
            addons: {
                descriptions: z.array(z.string()).default([]),
            },
            produce({ addons, options }) {
                return {
                    files: {
                        "README.md": `# ${options.title}\n${addons.descriptions.join("\n")}`,
                    },
                };
            },
        });
        test("default Addon value", async () => {
            const writeDirectory = vi.fn();
            const writeFile = vi.fn();
            await runBlock(block, {
                options: { title: "abc" },
                fs: {
                    readFile: noop("readFile"),
                    writeDirectory,
                    writeFile,
                },
                fetcher: noop("fetcher"),
                runner: noop("runner"),
            });
            expect({
                writeDirectory: writeDirectory.mock.calls,
                writeFile: writeFile.mock.calls,
            }).toMatchInlineSnapshot(`
			{
			  "writeDirectory": [
			    [
			      ".",
			    ],
			  ],
			  "writeFile": [
			    [
			      "README.md",
			      "# abc
			",
			    ],
			  ],
			}
		`);
        });
        test("provided Addon value", async () => {
            const writeDirectory = vi.fn();
            const writeFile = vi.fn();
            await runBlock(block, {
                addons: {
                    descriptions: ["def"],
                },
                options: { title: "abc" },
                fs: {
                    readFile: noop("readFile"),
                    writeDirectory,
                    writeFile,
                },
                fetcher: noop("fetcher"),
                runner: noop("runner"),
            });
            expect({
                writeDirectory: writeDirectory.mock.calls,
                writeFile: writeFile.mock.calls,
            }).toMatchInlineSnapshot(`
				{
				  "writeDirectory": [
				    [
				      ".",
				    ],
				  ],
				  "writeFile": [
				    [
				      "README.md",
				      "# abc

				def
				",
				    ],
				  ],
				}
			`);
        });
    });
});
//# sourceMappingURL=runBlock.test%20copy.js.map