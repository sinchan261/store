import fs from "node:fs/promises";
import { assertOptionsForInitialize } from "../cli/initialize/assertOptionsForInitialize.js";
import { clearLocalGitTags } from "../modes/clearLocalGitTags.js";
import { createRepositoryOnGitHub } from "../modes/createRepositoryOnGitHub.js";
import { createTrackingBranches } from "../modes/createTrackingBranches.js";
import { producePreset } from "../producers/producePreset.js";
import { createSystemContextWithAuth } from "../system/createSystemContextWithAuth.js";
import { applyCreation } from "./applyCreation.js";
export async function runPreset(preset, settings) {
    const { directory = ".", options } = settings;
    await fs.mkdir(directory, { recursive: true });
    const system = await createSystemContextWithAuth({
        directory,
        ...settings,
    });
    const run = async () => {
        const creation = await producePreset(preset, { ...system, ...settings });
        await applyCreation(creation, system);
        return creation;
    };
    if (settings.mode !== "initialize") {
        return await run();
    }
    assertOptionsForInitialize(options);
    await createRepositoryOnGitHub(options, system.fetchers.octokit, preset.base.template);
    const creation = await run();
    await createTrackingBranches(options, system.runner);
    if (preset.base.template) {
        await clearLocalGitTags(system.runner);
    }
    return creation;
}
//# sourceMappingURL=runPreset.js.map