import { describe, expect, it, vi } from "vitest";
import { applyRequestsToSystem } from "./applyRequestsToSystem.js";
function createStubSystem() {
    return {
        display: {
            item: vi.fn(),
            log: vi.fn(),
        },
        fetchers: {
            fetch: vi.fn(),
            octokit: {},
        },
    };
}
describe("applyRequestsToSystem", () => {
    it("displays the error when a request rejects", async () => {
        const error = new Error();
        const id = "abc";
        const system = createStubSystem();
        await applyRequestsToSystem([
            {
                id,
                send: vi.fn().mockRejectedValueOnce(error),
            },
        ], system);
        expect(system.display.item.mock.calls).toEqual([
            ["requests", id, { start: expect.any(Number) }],
            ["requests", id, { error }],
            ["requests", id, { end: expect.any(Number) }],
        ]);
    });
});
//# sourceMappingURL=applyRequestsToSystem.test.js.map