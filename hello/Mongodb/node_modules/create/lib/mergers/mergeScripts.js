export function mergeScripts(first, second) {
    const commandsByPhase = new Map();
    const commandsWithoutPhase = [];
    for (const command of [...first, ...second]) {
        if (typeof command === "string") {
            commandsWithoutPhase.push(command);
            continue;
        }
        const byPhase = commandsByPhase.get(command.phase);
        if (!byPhase) {
            commandsByPhase.set(command.phase, [command.commands.slice()]);
            continue;
        }
        for (const existing of byPhase) {
            if (existing.length <= command.commands.length) {
                if (firstHasSameStart(existing, command.commands)) {
                    existing.push(...command.commands.slice(existing.length));
                }
                else {
                    byPhase.push(command.commands);
                }
            }
            else if (!firstHasSameStart(command.commands, existing)) {
                byPhase.push(command.commands);
            }
        }
    }
    return [
        ...Array.from(commandsByPhase).flatMap(([phase, phaseCommands]) => phaseCommands.map((commands) => ({ commands, phase }))),
        ...new Set(commandsWithoutPhase),
    ];
}
function firstHasSameStart(first, second) {
    return first.every((entry, i) => entry === second[i]);
}
//# sourceMappingURL=mergeScripts.js.map