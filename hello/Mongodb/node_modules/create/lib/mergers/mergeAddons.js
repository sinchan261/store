import hashObject from "hash-object";
export function mergeAddons(first, second) {
    const byBlock = new Map();
    for (const { addons, block } of [...first, ...second]) {
        const merged = mergeBlockAddons(byBlock.get(block), addons);
        if (isNotNullish(merged)) {
            byBlock.set(block, merged);
        }
    }
    return Array.from(byBlock).map(([block, addons]) => ({ addons, block }));
}
function isNotNullish(value) {
    return value != null;
}
function mergeBlockAddonArrays(firsts, seconds) {
    const firstNonNullish = firsts.filter(isNotNullish);
    const secondNonNullish = seconds.filter(isNotNullish);
    return mergeBlockAddonArraysNonNullish(firstNonNullish, secondNonNullish);
}
function mergeBlockAddonArraysNonNullish(firsts, seconds) {
    const seen = new Set();
    return [...firsts, ...seconds].filter((value) => {
        const identity = value && typeof value === "object" ? hashObject(value) : value;
        if (seen.has(identity)) {
            return false;
        }
        seen.add(identity);
        return true;
    });
}
function mergeBlockAddons(first, second) {
    if (Array.isArray(first) && Array.isArray(second)) {
        return mergeBlockAddonArrays(first, second);
    }
    return first ?? second;
}
//# sourceMappingURL=mergeAddons.js.map